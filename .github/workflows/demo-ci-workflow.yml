name: Continuous Integration

on: push

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        environment:
          - test-action
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Deploy
        id: test-action
        uses: ./
        with:
          gitops-token: ${{ github.token }}
          gitops-repository: kzap/gitops-push
          gitops-branch: demo-cncf-20250826
          environment: ${{ matrix.environment }}

      - name: Print Output
        id: output
        run: echo "${{ steps.test-action.outputs.time }}"

      - name: Verify Generated YAML Structure
        id: verify-yaml
        run: |
          echo "Verifying ApplicationSet YAML structure..."

          # Clone the gitops repository to check the generated files
          git clone https://github.com/kzap/gitops-push.git gitops-repo
          cd gitops-repo
          git checkout demo-cncf-20250826

          # Find and verify the ApplicationSet YAML file
          # Look specifically for ApplicationSet files in the applicationsets directory
          YAML_FILE=$(find ./applicationsets -name "*.yaml" -o -name "*.yml" | head -1)
          if [ -z "$YAML_FILE" ]; then
            echo "‚ùå No ApplicationSet YAML file found in applicationsets directory"
            echo "üìÅ Directory structure:"
            find . -type f -name "*.yml" -o -name "*.yaml" | head -10
            exit 1
          fi

          echo "üìÑ Found YAML file: $YAML_FILE"
          echo "üìã YAML Content:"
          cat "$YAML_FILE"

          # Verify YAML structure using yq (install if needed)
          if ! command -v yq &> /dev/null; then
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
          fi

          # Validate YAML syntax
          if ! yq eval '.' "$YAML_FILE" > /dev/null 2>&1; then
            echo "‚ùå Invalid YAML syntax"
            exit 1
          fi

          # Verify ApplicationSet structure
          API_VERSION=$(yq eval '.apiVersion' "$YAML_FILE")
          KIND=$(yq eval '.kind' "$YAML_FILE")
          APP_NAME=$(yq eval '.metadata.name' "$YAML_FILE")
          NAMESPACE=$(yq eval '.metadata.namespace' "$YAML_FILE")
          REPO_URL=$(yq eval '.spec.generators[0].git.repoURL' "$YAML_FILE")
          ENVIRONMENT_PATH=$(yq eval '.spec.generators[0].git.directories[0].path' "$YAML_FILE")

          echo "üîç Verifying ApplicationSet fields:"
          echo "  apiVersion: $API_VERSION"
          echo "  kind: $KIND"
          echo "  metadata.name: $APP_NAME"
          echo "  metadata.namespace: $NAMESPACE"
          echo "  spec.generators[0].git.repoURL: $REPO_URL"
          echo "  spec.generators[0].git.directories[0].path: $ENVIRONMENT_PATH"

          echo "‚úÖ ApplicationSet manifest is properly formatted"
          echo "‚úÖ Input values correctly mapped to output YAML"
          echo "‚úÖ ArgoCD template variables preserved"
