name: Continuous Integration

on:
  pull_request:
    branches:
      - main
      - feature/first-commit
  push:
    branches:
      - main
      - feature/first-commit

permissions:
  contents: read

jobs:
  test-javascript:
    name: JavaScript Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Dependencies
        id: npm-ci
        run: npm ci

      - name: Check Format
        id: npm-format-check
        run: npm run format:check

      - name: Lint
        id: npm-lint
        run: npm run lint

      - name: Test
        id: npm-ci-test
        run: npm run ci-test

  e2e-test:
    name: End-to-End Test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        environment:
          - test-action
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Test Local Action
        id: test-action
        uses: ./
        with:
          gitops-token: ${{ github.token }}
          gitops-repository: kzap/gitops-push
          gitops-branch:
            gitops-ci-${{ github.run_id }}-${{ github.run_attempt }}
          environment: ${{ matrix.environment }}

      - name: Print Output
        id: output
        run: echo "${{ steps.test-action.outputs.time }}"

      - name: Verify Generated YAML Structure
        id: verify-yaml
        run: |
          echo "Verifying ApplicationSet YAML structure..."

          # Clone the gitops repository to check the generated files
          git clone https://github.com/kzap/gitops-push.git gitops-repo
          cd gitops-repo
          git checkout gitops-ci-${{ github.run_id }}-${{ github.run_attempt }}

          # Find and verify the ApplicationSet YAML file
          YAML_FILE=$(find . -name "*.yaml" -o -name "*.yml" | head -1)
          if [ -z "$YAML_FILE" ]; then
            echo "‚ùå No YAML file found in gitops repository"
            exit 1
          fi

          echo "üìÑ Found YAML file: $YAML_FILE"
          echo "üìã YAML Content:"
          cat "$YAML_FILE"

          # Verify YAML structure using yq (install if needed)
          if ! command -v yq &> /dev/null; then
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
          fi

          # Validate YAML syntax
          if ! yq eval '.' "$YAML_FILE" > /dev/null 2>&1; then
            echo "‚ùå Invalid YAML syntax"
            exit 1
          fi

          # Verify ApplicationSet structure
          API_VERSION=$(yq eval '.apiVersion' "$YAML_FILE")
          KIND=$(yq eval '.kind' "$YAML_FILE")
          APP_NAME=$(yq eval '.metadata.name' "$YAML_FILE")
          NAMESPACE=$(yq eval '.metadata.namespace' "$YAML_FILE")
          REPO_URL=$(yq eval '.spec.generators[0].git.repoURL' "$YAML_FILE")
          ENVIRONMENT_PATH=$(yq eval '.spec.generators[0].git.directories[0].path' "$YAML_FILE")

          echo "üîç Verifying ApplicationSet fields:"
          echo "  apiVersion: $API_VERSION"
          echo "  kind: $KIND"
          echo "  metadata.name: $APP_NAME"
          echo "  metadata.namespace: $NAMESPACE"
          echo "  spec.generators[0].git.repoURL: $REPO_URL"
          echo "  spec.generators[0].git.directories[0].path: $ENVIRONMENT_PATH"

          # Validate required fields
          if [ "$API_VERSION" != "argoproj.io/v1alpha1" ]; then
            echo "‚ùå Invalid apiVersion: expected 'argoproj.io/v1alpha1', got '$API_VERSION'"
            exit 1
          fi

          if [ "$KIND" != "ApplicationSet" ]; then
            echo "‚ùå Invalid kind: expected 'ApplicationSet', got '$KIND'"
            exit 1
          fi

          if [ "$NAMESPACE" != "argocd" ]; then
            echo "‚ùå Invalid namespace: expected 'argocd', got '$NAMESPACE'"
            exit 1
          fi

          if [[ "$REPO_URL" != *"github.com"* ]]; then
            echo "‚ùå Invalid repoURL: expected GitHub URL, got '$REPO_URL'"
            exit 1
          fi

          if [[ "$ENVIRONMENT_PATH" != *"${{ matrix.environment }}"* ]]; then
            echo "‚ùå Invalid environment path: expected to contain '${{ matrix.environment }}', got '$ENVIRONMENT_PATH'"
            exit 1
          fi

          # Verify ArgoCD template variables are preserved
          if ! grep -q "{{path.basename}}" "$YAML_FILE"; then
            echo "‚ùå ArgoCD template variable {{path.basename}} not found in YAML"
            exit 1
          fi

          if ! grep -q "{{path}}" "$YAML_FILE"; then
            echo "‚ùå ArgoCD template variable {{path}} not found in YAML"
            exit 1
          fi

          echo "‚úÖ All YAML structure validations passed!"
          echo "‚úÖ ApplicationSet manifest is properly formatted"
          echo "‚úÖ Input values correctly mapped to output YAML"
          echo "‚úÖ ArgoCD template variables preserved"
