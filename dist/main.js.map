{"version":3,"file":"main.js","sources":["../src/main.ts"],"sourcesContent":["import * as core from '@actions/core'\nimport * as github from '@actions/github'\nimport * as io from '@actions/io'\nimport * as fs from 'fs'\nimport * as path from 'path'\nimport * as os from 'os'\nimport {\n  generateValuesYaml,\n  generateArgoCDAppManifest\n} from './utils/argocd-app-manifest'\nimport {\n  parseRepositoryInfo,\n  cloneGitOpsRepo,\n  commitAndPush\n} from './utils/git'\n\n/**\n * The main function for the action.\n *\n * @returns {Promise<void>} Resolves when the action is complete.\n */\nexport async function run() {\n  let gitOpsRepoLocalPath = ''\n  try {\n    // Get inputs\n    let gitopsRepository = core.getInput('gitops-repository', {\n      required: false\n    })\n    // If gitops-repository is not provided via input, check environment variable\n    if (!gitopsRepository) {\n      gitopsRepository = process.env.GITOPS_REPOSITORY || ''\n      if (!gitopsRepository) {\n        throw new Error(\n          'gitops-repository input or GITOPS_REPOSITORY environment variable must be provided'\n        )\n      }\n    }\n    const gitopsToken = core.getInput('gitops-token', { required: true })\n    const gitopsBranch =\n      core.getInput('gitops-branch', { required: false }) || 'main'\n    const environment = core.getInput('environment', { required: true })\n    const applicationName =\n      core.getInput('application-name') || github.context.repo.repo\n    const applicationManifestsPath = core.getInput(\n      'application-manifests-path',\n      { required: true }\n    )\n\n    // Parse repository information\n    const { gitopsOrg, gitopsRepoName } = parseRepositoryInfo(gitopsRepository)\n    core.debug(`Repository parsed as: ${gitopsOrg}/${gitopsRepoName}`)\n\n    // Mask the token to prevent it from being logged\n    core.setSecret(gitopsToken)\n    core.debug('Token has been masked in logs')\n\n    // Log information (debug only)\n    core.debug(`Git Organization: ${gitopsOrg}`)\n    core.debug(`Git Repository: ${gitopsRepoName}`)\n    core.debug(`Git Branch: ${gitopsBranch || '[Using default branch]'}`)\n    core.debug(`Environment: ${environment}`)\n    core.debug(`Application Name: ${applicationName}`)\n\n    core.notice(\n      `We are going to push [${environment}] ArgoCD ApplicationSet for [${applicationName}] to [${gitopsOrg}/${gitopsRepoName}] on the branch [${gitopsBranch || '[Using default branch]'}].`\n    )\n\n    // 0. Clone GitOps Repository, ensure it is a temporary directory and empty\n    gitOpsRepoLocalPath = path.join(os.tmpdir(), `gitops-repo-${Date.now()}`)\n    await io.rmRF(gitOpsRepoLocalPath)\n    await io.mkdirP(gitOpsRepoLocalPath)\n\n    // Clone the GitOps repository\n    await cloneGitOpsRepo(\n      gitopsToken,\n      gitopsOrg,\n      gitopsRepoName,\n      gitopsBranch,\n      gitOpsRepoLocalPath\n    )\n\n    // 1. Create ArgoCD Manifest\n\n    // Prepare template data for the ApplicationSet manifest\n    const customValues =\n      core.getInput('custom-values', { required: false }) || ''\n    const valuesYaml = await generateValuesYaml(\n      applicationName,\n      environment,\n      gitopsRepoName,\n      gitopsOrg,\n      gitopsBranch,\n      customValues\n    )\n\n    // Generate the manifest file\n    const argocdAppManifest = await generateArgoCDAppManifest(\n      applicationName,\n      environment,\n      valuesYaml\n    )\n\n    // 1c. Save argocd app manifest to a file\n    const appDir = path.join(\n      gitOpsRepoLocalPath,\n      'argocd-apps',\n      applicationName\n    )\n    await io.mkdirP(appDir)\n    await fs.promises.writeFile(\n      path.join(appDir, `${environment}.yml`),\n      argocdAppManifest\n    )\n\n    // 2. Copy application manifests to GitOps repository (skipped)\n\n    // 3. Post Summary to GitHub Step Summary\n\n    // 3a. Summary of the ArgoCD ApplicationSet\n    // 3b. Summary of the files copied to GitOps repository\n\n    // Commit and push changes\n    await commitAndPush(\n      gitOpsRepoLocalPath,\n      applicationName,\n      environment,\n      gitopsBranch\n    )\n\n    core.info(\n      `âœ… Successfully updated ApplicationSet for ${applicationName} in ${environment} environment`\n    )\n\n    // Set outputs for other workflow steps to use\n    core.setOutput('time', new Date().toTimeString())\n  } catch (error) {\n    // Clean up the temporary directory\n    try {\n      await io.rmRF(gitOpsRepoLocalPath)\n    } catch (cleanupError) {\n      // Ignore cleanup errors\n      core.debug(\n        `Failed to clean up directory: ${\n          cleanupError instanceof Error\n            ? cleanupError.message\n            : String(cleanupError)\n        }`\n      )\n    }\n\n    // Fail the workflow run if an error occurs\n    if (error instanceof Error) core.setFailed(error.message)\n  }\n}\n"],"names":[],"mappings":"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"}