{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * The entrypoint for the action. This file simply imports and runs the action's\n * main logic.\n */\nimport { run } from './main'\n\n/* eslint-disable-next-line no-unused-vars */\nrun()\n"],"names":[],"mappings":";;AAAA;;;AAGG;AAGH;AACA,GAAG,EAAE"}form, 'linux' | 'darwin' | 'win32'>\n\nconst toolDownloadUrl: Record<\n  SupportedTool,\n  Record<string, Record<PlatformSubset, string>>\n> = {\n  helm: {\n    latest: {\n      linux:\n        'https://github.com/helm/helm/releases/latest/download/helm-linux-amd64.tar.gz',\n      darwin:\n        'https://github.com/helm/helm/releases/latest/download/helm-darwin-amd64.tar.gz',\n      win32:\n        'https://github.com/helm/helm/releases/latest/download/helm-windows-amd64.zip'\n    }\n  }\n}\n\nexport async function fetchTcTool(\n  tool: SupportedTool,\n  version: string = 'latest'\n): Promise<boolean> {\n  const platform = process.platform as PlatformSubset\n  const toolDirectory = tc.find(tool, version, platform)\n  if (toolDirectory) {\n    core.info(\n      `Tool ${tool} version ${version} is already cached in ${toolDirectory}`\n    )\n    core.addPath(toolDirectory)\n    return true\n  } else {\n    core.info(`Tool ${tool} version ${version} is not cached, downloading...`)\n  }\n\n  // check if we have a download url for the tool\n  if (!toolDownloadUrl[tool]) {\n    throw new Error(`No download url found for tool: ${tool}`)\n  }\n\n  // check if we have a download url for the current version\n  if (!toolDownloadUrl[tool][version]) {\n    throw new Error(\n      `No download url found for tool: ${tool} version: ${version}`\n    )\n  }\n\n  // check if we have a download url for the current platform\n  if (!toolDownloadUrl[tool][version][platform]) {\n    throw new Error(\n      `No download url found for tool: ${tool} version: ${version} on platform: ${platform}`\n    )\n  }\n\n  // download the tool using tc cache\n  const downloadUrl = toolDownloadUrl[tool][version][platform]\n  const downloadPath = await tc.downloadTool(downloadUrl)\n  const extractedPath = await tc.extractTar(downloadPath)\n\n  const cachedPath = await tc.cacheDir(extractedPath, tool, version)\n  core.addPath(cachedPath)\n  core.info(`Tool ${tool} version ${version} has been cached in ${cachedPath}`)\n  return true\n}\n","import * as exec from '@actions/exec'\nimport { fetchTcTool } from './tools'\nimport * as path from 'path'\nimport * as fs from 'fs'\nimport * as os from 'os'\nimport * as yaml from 'js-yaml'\nimport _ from 'lodash'\n\nexport async function generateValuesYaml(\n  applicationName: string,\n  environment: string,\n  sourceRepo: string,\n  sourceOrg: string,\n  sourceBranch: string,\n  customValues: string\n): Promise<string> {\n  // define defaultValues YAML object as a JSON object\n  const defaultValues: Record<string, any> = {\n    applicationName: `${applicationName}-${environment}`,\n    application: {\n      destination: {\n        namespace: applicationName\n      },\n      source: {\n        repoURL: `https://github.com/${sourceOrg}/${sourceRepo}.git`,\n        targetRevision: sourceBranch,\n        path: `${applicationName}/${environment}/`\n      }\n    }\n  }\n\n  // if customValues is not provided, return defaultValues\n  if (!customValues) {\n    return yaml.dump(defaultValues)\n  }\n\n  // parse customValues as YAML object\n  try {\n    const customValuesYaml = yaml.load(customValues)\n\n    // merge defaultValues and customValues using lodash merge\n    const mergedValues = _.merge(defaultValues, customValuesYaml)\n    return yaml.dump(mergedValues)\n  } catch (error) {\n    throw new Error(`Invalid custom values YAML: ${error}`)\n  }\n}\n\nexport async function generateArgoCDAppManifest(\n  applicationName: string,\n  environment: string,\n  customValuesYaml: string\n) {\n  // download helm tool using tc cache\n  await fetchTcTool('helm')\n\n  // store custom values yaml in a temporary file\n  const customValuesFilePath = path.join(os.tmpdir(), 'custom-values.yaml')\n  await fs.promises.writeFile(customValuesFilePath, customValuesYaml)\n\n  // render the manifest using helm template\n  const manifest = await exec.exec('helm', [\n    'template',\n    '.',\n    '-f',\n    customValuesFilePath\n  ])\n\n  return `\n  apiVersion: argoproj.io/v1alpha1\n  kind: Application\n  metadata:\n    name: ${applicationName}\n    namespace: argocd\n  spec:\n    project: default\n  `\n}\n","import * as exec from '@actions/exec'\nimport * as core from '@actions/core'\nimport * as github from '@actions/github'\n\n/**\n * Parse the repository information from input.\n *\n * @param {string} repository - The repository string to parse\n * @returns {Object} Object containing gitopsOrg and gitopsRepoName\n */\nexport function parseRepositoryInfo(repository: string): {\n  gitopsOrg: string\n  gitopsRepoName: string\n} {\n  let gitopsOrg = ''\n  let gitopsRepoName = ''\n\n  if (repository.includes('/')) {\n    // If repository contains a slash, split it to get org and repo name\n    const parts = repository.split('/')\n    gitopsOrg = parts[0]\n    gitopsRepoName = parts[1]\n    core.debug(`Using provided repository: ${gitopsOrg}/${gitopsRepoName}`)\n  } else {\n    // If not, use the current repository's owner as the org\n    gitopsOrg = github.context.repo.owner\n    gitopsRepoName = repository\n    core.debug(`Using context owner: ${gitopsOrg}/${gitopsRepoName}`)\n  }\n\n  return { gitopsOrg, gitopsRepoName }\n}\n\n/**\n * Clone GitOps repository\n *\n * @param {string} token - GitHub token\n * @param {string} org - GitHub organization\n * @param {string} repo - Repository name\n * @param {string} branch - Branch name (optional)\n * @param {string} directory - Directory to clone into\n * @returns {Promise<void>}\n */\nexport async function cloneGitOpsRepo(\n  token: string,\n  org: string,\n  repo: string,\n  branch: string,\n  directory: string\n) {\n  try {\n    // Clone the GitOps repository\n    const cloneUrl = `https://x-access-token:${token}@github.com/${org}/${repo}.git`\n    await exec.exec('git', ['clone', cloneUrl, directory])\n\n    // Checkout the target branch if specified, create it if it doesn't exist\n    if (branch) {\n      try {\n        await exec.exec('git', ['checkout', branch], { cwd: directory })\n      } catch (error) {\n        core.debug(`Branch ${branch} doesn't exist, creating new branch`)\n        await exec.exec('git', ['checkout', '-b', branch], { cwd: directory })\n      }\n    }\n\n    // Configure Git user for commits\n    await exec.exec('git', ['config', 'user.name', 'GitHub Action'], {\n      cwd: directory\n    })\n    await exec.exec('git', ['config', 'user.email', 'action@github.com'], {\n      cwd: directory\n    })\n\n    core.debug(`Successfully cloned ${org}/${repo} to ${directory}`)\n  } catch (error) {\n    const message = error instanceof Error ? error.message : String(error)\n    throw new Error(`Failed to clone GitOps repository: ${message}`)\n  }\n}\n\n/**\n * Commit and push changes to GitOps repository\n *\n * @param {string} directory - GitOps repository directory\n * @param {string} applicationName - Application name\n * @param {string} environment - Environment name\n * @param {string} branch - Branch name (optional)\n * @returns {Promise<void>}\n */\nexport async function commitAndPush(\n  directory: string,\n  applicationName: string,\n  environment: string,\n  branch: string\n) {\n  try {\n    // Add changes\n    await exec.exec('git', ['add', '.'], { cwd: directory })\n\n    // Create commit\n    const commitMessage = `Update ${applicationName} ApplicationSet for ${environment} environment`\n    await exec.exec('git', ['commit', '-m', commitMessage], { cwd: directory })\n\n    // Push changes\n    const pushBranch = branch || 'HEAD'\n    await exec.exec('git', ['push', 'origin', pushBranch], { cwd: directory })\n\n    core.debug(`Successfully pushed changes to ${pushBranch}`)\n  } catch (error) {\n    const message = error instanceof Error ? error.message : String(error)\n    throw new Error(`Failed to commit and push changes: ${message}`)\n  }\n}\n","import * as core from '@actions/core'\nimport * as github from '@actions/github'\nimport * as io from '@actions/io'\nimport * as fs from 'fs'\nimport * as path from 'path'\nimport * as os from 'os'\nimport {\n  generateValuesYaml,\n  generateArgoCDAppManifest\n} from './utils/argocd-app-manifest'\nimport {\n  parseRepositoryInfo,\n  cloneGitOpsRepo,\n  commitAndPush\n} from './utils/git'\n\n/**\n * The main function for the action.\n *\n * @returns {Promise<void>} Resolves when the action is complete.\n */\nexport async function run() {\n  let gitOpsRepoLocalPath = ''\n  try {\n    // Get inputs\n    let gitopsRepository = core.getInput('gitops-repository', {\n      required: false\n    })\n    // If gitops-repository is not provided via input, check environment variable\n    if (!gitopsRepository) {\n      gitopsRepository = process.env.GITOPS_REPOSITORY || ''\n      if (!gitopsRepository) {\n        throw new Error(\n          'gitops-repository input or GITOPS_REPOSITORY environment variable must be provided'\n        )\n      }\n    }\n    const gitopsToken = core.getInput('gitops-token', { required: true })\n    const gitopsBranch =\n      core.getInput('gitops-branch', { required: false }) || 'main'\n    const environment = core.getInput('environment', { required: true })\n    const applicationName =\n      core.getInput('application-name') || github.context.repo.repo\n    const applicationManifestsPath = core.getInput(\n      'application-manifests-path',\n      { required: true }\n    )\n\n    // Parse repository information\n    const { gitopsOrg, gitopsRepoName } = parseRepositoryInfo(gitopsRepository)\n    core.debug(`Repository parsed as: ${gitopsOrg}/${gitopsRepoName}`)\n\n    // Mask the token to prevent it from being logged\n    core.setSecret(gitopsToken)\n    core.debug('Token has been masked in logs')\n\n    // Log information (debug only)\n    core.debug(`Git Organization: ${gitopsOrg}`)\n    core.debug(`Git Repository: ${gitopsRepoName}`)\n    core.debug(`Git Branch: ${gitopsBranch || '[Using default branch]'}`)\n    core.debug(`Environment: ${environment}`)\n    core.debug(`Application Name: ${applicationName}`)\n\n    core.notice(\n      `We are going to push [${environment}] ArgoCD ApplicationSet for [${applicationName}] to [${gitopsOrg}/${gitopsRepoName}] on the branch [${gitopsBranch || '[Using default branch]'}].`\n    )\n\n    // 0. Clone GitOps Repository, ensure it is a temporary directory and empty\n    gitOpsRepoLocalPath = path.join(os.tmpdir(), `gitops-repo-${Date.now()}`)\n    await io.rmRF(gitOpsRepoLocalPath)\n    await io.mkdirP(gitOpsRepoLocalPath)\n\n    // Clone the GitOps repository\n    await cloneGitOpsRepo(\n      gitopsToken,\n      gitopsOrg,\n      gitopsRepoName,\n      gitopsBranch,\n      gitOpsRepoLocalPath\n    )\n\n    // 1. Create ArgoCD Manifest\n\n    // Prepare template data for the ApplicationSet manifest\n    const customValues =\n      core.getInput('custom-values', { required: false }) || ''\n    const valuesYaml = await generateValuesYaml(\n      applicationName,\n      environment,\n      gitopsRepoName,\n      gitopsOrg,\n      gitopsBranch,\n      customValues\n    )\n\n    // Generate the manifest file\n    const argocdAppManifest = await generateArgoCDAppManifest(\n      applicationName,\n      environment,\n      valuesYaml\n    )\n\n    // 1c. Save argocd app manifest to a file\n    const appDir = path.join(\n      gitOpsRepoLocalPath,\n      'argocd-apps',\n      applicationName\n    )\n    await io.mkdirP(appDir)\n    await fs.promises.writeFile(\n      path.join(appDir, `${environment}.yml`),\n      argocdAppManifest\n    )\n\n    // 2. Copy application manifests to GitOps repository (skipped)\n\n    // 3. Post Summary to GitHub Step Summary\n\n    // 3a. Summary of the ArgoCD ApplicationSet\n    // 3b. Summary of the files copied to GitOps repository\n\n    // Commit and push changes\n    await commitAndPush(\n      gitOpsRepoLocalPath,\n      applicationName,\n      environment,\n      gitopsBranch\n    )\n\n    core.info(\n      `✅ Successfully updated ApplicationSet for ${applicationName} in ${environment} environment`\n    )\n\n    // Set outputs for other workflow steps to use\n    core.setOutput('time', new Date().toTimeString())\n  } catch (error) {\n    // Clean up the temporary directory\n    try {\n      await io.rmRF(gitOpsRepoLocalPath)\n    } catch (cleanupError) {\n      // Ignore cleanup errors\n      core.debug(\n        `Failed to clean up directory: ${\n          cleanupError instanceof Error\n            ? cleanupError.message\n            : String(cleanupError)\n        }`\n      )\n    }\n\n    // Fail the workflow run if an error occurs\n    if (error instanceof Error) core.setFailed(error.message)\n  }\n}\n","/**\n * The entrypoint for the action. This file simply imports and runs the action's\n * main logic.\n */\nimport { run } from './main'\n\n/* eslint-disable-next-line no-unused-vars */\nrun()\n"],"names":[],"mappings":"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"}