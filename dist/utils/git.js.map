{"version":3,"file":"git.js","sources":["../../src/utils/git.ts"],"sourcesContent":["import * as exec from '@actions/exec'\nimport * as core from '@actions/core'\nimport * as github from '@actions/github'\nimport * as fs from 'fs'\nimport * as path from 'path'\nimport * as io from '@actions/io'\n\n/**\n * Parse the repository information from input.\n *\n * @param {string} repository - The repository string to parse\n * @returns {Object} Object containing gitopsOrg and gitopsRepoName\n */\nexport function parseRepositoryInfo(repository: string): {\n  gitopsOrg: string\n  gitopsRepoName: string\n} {\n  let gitopsOrg = ''\n  let gitopsRepoName = ''\n\n  if (repository.includes('/')) {\n    // If repository contains a slash, split it to get org and repo name\n    const parts = repository.split('/')\n    gitopsOrg = parts[0]\n    gitopsRepoName = parts[1]\n    core.debug(`Using provided repository: ${gitopsOrg}/${gitopsRepoName}`)\n  } else {\n    // If not, use the current repository's owner as the org\n    gitopsOrg = github.context.repo.owner\n    gitopsRepoName = repository\n    core.debug(`Using context owner: ${gitopsOrg}/${gitopsRepoName}`)\n  }\n\n  return { gitopsOrg, gitopsRepoName }\n}\n\n/**\n * Clone GitOps repository\n *\n * @param {string} token - GitHub token\n * @param {string} org - GitHub organization\n * @param {string} repo - Repository name\n * @param {string} branch - Branch name (optional)\n * @param {string} directory - Directory to clone into\n * @returns {Promise<void>}\n */\nexport async function cloneGitOpsRepo(\n  token: string,\n  org: string,\n  repo: string,\n  branch: string,\n  directory: string\n) {\n  try {\n    // Clone the GitOps repository\n    const cloneUrl = `https://x-access-token:${token}@github.com/${org}/${repo}.git`\n    await exec.exec('git', ['clone', cloneUrl, directory])\n\n    // Checkout the target branch if specified, create it if it doesn't exist\n    if (branch) {\n      try {\n        await exec.exec('git', ['checkout', branch], { cwd: directory })\n      } catch (error) {\n        core.debug(`Branch ${branch} doesn't exist, creating new branch`)\n        await exec.exec('git', ['checkout', '-b', branch], { cwd: directory })\n      }\n    }\n\n    // Configure Git user for commits\n    await exec.exec('git', ['config', 'user.name', 'GitHub Action'], {\n      cwd: directory\n    })\n    await exec.exec('git', ['config', 'user.email', 'action@github.com'], {\n      cwd: directory\n    })\n\n    core.debug(`Successfully cloned ${org}/${repo} to ${directory}`)\n  } catch (error) {\n    const message = error instanceof Error ? error.message : String(error)\n    throw new Error(`Failed to clone GitOps repository: ${message}`)\n  }\n}\n\n/**\n * Commit and push changes to GitOps repository\n *\n * @param {string} directory - GitOps repository directory\n * @param {string} applicationName - Application name\n * @param {string} environment - Environment name\n * @param {string} branch - Branch name (optional)\n * @param {string} argocdAppManifestContent - ArgoCD application manifest content\n * @param {string} applicationManifestsPath - Path to application manifests directory\n * @returns {Promise<void>}\n */\nexport async function commitAndPush(\n  directory: string,\n  applicationName: string,\n  environment: string,\n  branch: string,\n  argocdAppManifestContent: string,\n  applicationManifestsPath: string\n) {\n  try {\n    // Create the target directory structure: applicationName/environment/\n    const targetDir = path.join(directory, applicationName, environment)\n    await io.mkdirP(targetDir)\n    core.debug(`Created directory: ${targetDir}`)\n\n    // Write the ArgoCD application manifest to the target directory\n    const argocdManifestPath = path.join(targetDir, 'application.yaml')\n    await fs.promises.writeFile(argocdManifestPath, argocdAppManifestContent)\n    core.debug(`Wrote ArgoCD manifest to: ${argocdManifestPath}`)\n\n    // Copy application manifests from applicationManifestsPath to target directory\n    if (fs.existsSync(applicationManifestsPath)) {\n      const files = await fs.promises.readdir(applicationManifestsPath, {\n        withFileTypes: true\n      })\n\n      for (const file of files) {\n        const sourcePath = path.join(applicationManifestsPath, file.name)\n        const destPath = path.join(targetDir, file.name)\n\n        if (file.isDirectory()) {\n          // Recursively copy directory\n          await io.cp(sourcePath, destPath, { recursive: true })\n          core.debug(`Copied directory: ${sourcePath} -> ${destPath}`)\n        } else {\n          // Copy file\n          await io.cp(sourcePath, destPath)\n          core.debug(`Copied file: ${sourcePath} -> ${destPath}`)\n        }\n      }\n    } else {\n      core.warning(\n        `Application manifests path does not exist: ${applicationManifestsPath}`\n      )\n    }\n\n    // Add changes\n    await exec.exec('git', ['add', '.'], { cwd: directory })\n\n    // Check if there are any changes to commit\n    let hasChanges = false\n    await exec\n      .exec('git', ['diff', '--cached', '--quiet'], {\n        cwd: directory,\n        ignoreReturnCode: true,\n        listeners: {\n          stdout: () => {},\n          stderr: () => {},\n          errline: () => {}\n        }\n      })\n      .then(\n        () => {\n          hasChanges = false\n        },\n        () => {\n          hasChanges = true\n        }\n      )\n\n    if (!hasChanges) {\n      core.info('No changes to commit')\n      return\n    }\n\n    // Create commit with detailed message\n    const commitMessage = `Deploy ${applicationName} to ${environment}\n\nUpdated deployment manifests for ${applicationName} in ${environment} environment.\n- ArgoCD application manifest\n- Application manifests from ${path.basename(applicationManifestsPath)}`\n\n    await exec.exec('git', ['commit', '-m', commitMessage], { cwd: directory })\n\n    // Push changes with retry logic\n    const pushBranch = branch || 'HEAD'\n    const maxRetries = 4\n    const retryDelays = [2000, 4000, 8000, 16000] // exponential backoff in ms\n\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        await exec.exec('git', ['push', '-u', 'origin', pushBranch], {\n          cwd: directory\n        })\n        core.debug(`Successfully pushed changes to ${pushBranch}`)\n        return\n      } catch (error) {\n        if (attempt < maxRetries) {\n          const delay = retryDelays[attempt]\n          core.warning(\n            `Push failed (attempt ${attempt + 1}/${maxRetries + 1}), retrying in ${delay / 1000}s...`\n          )\n          await new Promise((resolve) => setTimeout(resolve, delay))\n        } else {\n          throw error\n        }\n      }\n    }\n  } catch (error) {\n    const message = error instanceof Error ? error.message : String(error)\n    throw new Error(`Failed to commit and push changes: ${message}`)\n  }\n}\n"],"names":[],"mappings":"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"}