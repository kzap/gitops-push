{"version":3,"file":"git.js","sources":["../../src/utils/git.ts"],"sourcesContent":["import * as exec from '@actions/exec'\nimport * as core from '@actions/core'\nimport * as github from '@actions/github'\n\n/**\n * Parse the repository information from input.\n *\n * @param {string} repository - The repository string to parse\n * @returns {Object} Object containing gitopsOrg and gitopsRepoName\n */\nexport function parseRepositoryInfo(repository: string): {\n  gitopsOrg: string\n  gitopsRepoName: string\n} {\n  let gitopsOrg = ''\n  let gitopsRepoName = ''\n\n  if (repository.includes('/')) {\n    // If repository contains a slash, split it to get org and repo name\n    const parts = repository.split('/')\n    gitopsOrg = parts[0]\n    gitopsRepoName = parts[1]\n    core.debug(`Using provided repository: ${gitopsOrg}/${gitopsRepoName}`)\n  } else {\n    // If not, use the current repository's owner as the org\n    gitopsOrg = github.context.repo.owner\n    gitopsRepoName = repository\n    core.debug(`Using context owner: ${gitopsOrg}/${gitopsRepoName}`)\n  }\n\n  return { gitopsOrg, gitopsRepoName }\n}\n\n/**\n * Clone GitOps repository\n *\n * @param {string} token - GitHub token\n * @param {string} org - GitHub organization\n * @param {string} repo - Repository name\n * @param {string} branch - Branch name (optional)\n * @param {string} directory - Directory to clone into\n * @returns {Promise<void>}\n */\nexport async function cloneGitOpsRepo(\n  token: string,\n  org: string,\n  repo: string,\n  branch: string,\n  directory: string\n) {\n  try {\n    // Clone the GitOps repository\n    const cloneUrl = `https://x-access-token:${token}@github.com/${org}/${repo}.git`\n    await exec.exec('git', ['clone', cloneUrl, directory])\n\n    // Checkout the target branch if specified, create it if it doesn't exist\n    if (branch) {\n      try {\n        await exec.exec('git', ['checkout', branch], { cwd: directory })\n      } catch (error) {\n        core.debug(`Branch ${branch} doesn't exist, creating new branch`)\n        await exec.exec('git', ['checkout', '-b', branch], { cwd: directory })\n      }\n    }\n\n    // Configure Git user for commits\n    await exec.exec('git', ['config', 'user.name', 'GitHub Action'], {\n      cwd: directory\n    })\n    await exec.exec('git', ['config', 'user.email', 'action@github.com'], {\n      cwd: directory\n    })\n\n    core.debug(`Successfully cloned ${org}/${repo} to ${directory}`)\n  } catch (error) {\n    const message = error instanceof Error ? error.message : String(error)\n    throw new Error(`Failed to clone GitOps repository: ${message}`)\n  }\n}\n\n/**\n * Commit and push changes to GitOps repository\n *\n * @param {string} directory - GitOps repository directory\n * @param {string} applicationName - Application name\n * @param {string} environment - Environment name\n * @param {string} branch - Branch name (optional)\n * @returns {Promise<void>}\n */\nexport async function commitAndPush(\n  directory: string,\n  applicationName: string,\n  environment: string,\n  branch: string\n) {\n  try {\n    // Add changes\n    await exec.exec('git', ['add', '.'], { cwd: directory })\n\n    // Create commit\n    const commitMessage = `Update ${applicationName} ApplicationSet for ${environment} environment`\n    await exec.exec('git', ['commit', '-m', commitMessage], { cwd: directory })\n\n    // Push changes\n    const pushBranch = branch || 'HEAD'\n    await exec.exec('git', ['push', 'origin', pushBranch], { cwd: directory })\n\n    core.debug(`Successfully pushed changes to ${pushBranch}`)\n  } catch (error) {\n    const message = error instanceof Error ? error.message : String(error)\n    throw new Error(`Failed to commit and push changes: ${message}`)\n  }\n}\n"],"names":[],"mappings":"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"}