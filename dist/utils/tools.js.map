{"version":3,"file":"tools.js","sources":["../../src/utils/tools.ts"],"sourcesContent":["import * as tc from '@actions/tool-cache'\nimport * as core from '@actions/core'\n\ntype SupportedTool = 'helm'\ntype PlatformSubset = Extract<NodeJS.Platform, 'linux' | 'darwin' | 'win32'>\n\nconst toolDownloadUrl: Record<\n  SupportedTool,\n  Record<string, Record<PlatformSubset, string>>\n> = {\n  helm: {\n    latest: {\n      linux:\n        'https://github.com/helm/helm/releases/latest/download/helm-linux-amd64.tar.gz',\n      darwin:\n        'https://github.com/helm/helm/releases/latest/download/helm-darwin-amd64.tar.gz',\n      win32:\n        'https://github.com/helm/helm/releases/latest/download/helm-windows-amd64.zip'\n    }\n  }\n}\n\nexport async function fetchTcTool(\n  tool: SupportedTool,\n  version: string = 'latest'\n): Promise<boolean> {\n  const platform = process.platform as PlatformSubset\n  const toolDirectory = tc.find(tool, version, platform)\n  if (toolDirectory) {\n    core.info(\n      `Tool ${tool} version ${version} is already cached in ${toolDirectory}`\n    )\n    core.addPath(toolDirectory)\n    return true\n  } else {\n    core.info(`Tool ${tool} version ${version} is not cached, downloading...`)\n  }\n\n  // check if we have a download url for the tool\n  if (!toolDownloadUrl[tool]) {\n    throw new Error(`No download url found for tool: ${tool}`)\n  }\n\n  // check if we have a download url for the current version\n  if (!toolDownloadUrl[tool][version]) {\n    throw new Error(\n      `No download url found for tool: ${tool} version: ${version}`\n    )\n  }\n\n  // check if we have a download url for the current platform\n  if (!toolDownloadUrl[tool][version][platform]) {\n    throw new Error(\n      `No download url found for tool: ${tool} version: ${version} on platform: ${platform}`\n    )\n  }\n\n  // download the tool using tc cache\n  const downloadUrl = toolDownloadUrl[tool][version][platform]\n  const downloadPath = await tc.downloadTool(downloadUrl)\n  const extractedPath = await tc.extractTar(downloadPath)\n\n  const cachedPath = await tc.cacheDir(extractedPath, tool, version)\n  core.addPath(cachedPath)\n  core.info(`Tool ${tool} version ${version} has been cached in ${cachedPath}`)\n  return true\n}\n"],"names":[],"mappings":";;;AAMA,MAAM,eAAe,GAGjB;AACF,IAAA,IAAI,EAAE;AACJ,QAAA,MAAM,EAAE;AACN,YAAA,KAAK,EACH,+EAA+E;AACjF,YAAA,MAAM,EACJ,gFAAgF;AAClF,YAAA,KAAK,EACH;AACH;AACF;CACF;AAEM,eAAe,WAAW,CAC/B,IAAmB,EACnB,UAAkB,QAAQ,EAAA;AAE1B,IAAA,MAAM,QAAQ,GAAG,OAAO,CAAC,QAA0B;AACnD,IAAA,MAAM,aAAa,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,CAAC;IACtD,IAAI,aAAa,EAAE;QACjB,IAAI,CAAC,IAAI,CACP,CAAQ,KAAA,EAAA,IAAI,CAAY,SAAA,EAAA,OAAO,CAAyB,sBAAA,EAAA,aAAa,CAAE,CAAA,CACxE;AACD,QAAA,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC;AAC3B,QAAA,OAAO,IAAI;;SACN;QACL,IAAI,CAAC,IAAI,CAAC,CAAA,KAAA,EAAQ,IAAI,CAAY,SAAA,EAAA,OAAO,CAAgC,8BAAA,CAAA,CAAC;;;AAI5E,IAAA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;AAC1B,QAAA,MAAM,IAAI,KAAK,CAAC,mCAAmC,IAAI,CAAA,CAAE,CAAC;;;IAI5D,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE;QACnC,MAAM,IAAI,KAAK,CACb,CAAA,gCAAA,EAAmC,IAAI,CAAa,UAAA,EAAA,OAAO,CAAE,CAAA,CAC9D;;;AAIH,IAAA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAE;QAC7C,MAAM,IAAI,KAAK,CACb,CAAmC,gCAAA,EAAA,IAAI,CAAa,UAAA,EAAA,OAAO,CAAiB,cAAA,EAAA,QAAQ,CAAE,CAAA,CACvF;;;AAIH,IAAA,MAAM,WAAW,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC;IAC5D,MAAM,YAAY,GAAG,MAAM,EAAE,CAAC,YAAY,CAAC,WAAW,CAAC;IACvD,MAAM,aAAa,GAAG,MAAM,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC;AAEvD,IAAA,MAAM,UAAU,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,aAAa,EAAE,IAAI,EAAE,OAAO,CAAC;AAClE,IAAA,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;IACxB,IAAI,CAAC,IAAI,CAAC,CAAQ,KAAA,EAAA,IAAI,CAAY,SAAA,EAAA,OAAO,CAAuB,oBAAA,EAAA,UAAU,CAAE,CAAA,CAAC;AAC7E,IAAA,OAAO,IAAI;AACb;;;;"}