{"version":3,"file":"argocd-app-manifest.js","sources":["../../src/utils/argocd-app-manifest.ts"],"sourcesContent":["import * as exec from '@actions/exec'\nimport { fetchTcTool } from './tools'\nimport * as path from 'path'\nimport * as fs from 'fs'\nimport * as os from 'os'\nimport * as yaml from 'js-yaml'\nimport _ from 'lodash'\n\nexport async function generateValuesYaml(\n  applicationName: string,\n  environment: string,\n  sourceRepo: string,\n  sourceOrg: string,\n  sourceBranch: string,\n  customValues: string\n): Promise<string> {\n  // define defaultValues YAML object as a JSON object\n  const defaultValues: Record<string, any> = {\n    applicationName: `${applicationName}-${environment}`,\n    application: {\n      destination: {\n        namespace: applicationName\n      },\n      source: {\n        repoURL: `https://github.com/${sourceOrg}/${sourceRepo}.git`,\n        targetRevision: sourceBranch,\n        path: `${applicationName}/${environment}/`\n      }\n    }\n  }\n\n  // if customValues is not provided, return defaultValues\n  if (!customValues) {\n    return yaml.dump(defaultValues)\n  }\n\n  // parse customValues as YAML object\n  try {\n    const customValuesYaml = yaml.load(customValues)\n\n    // merge defaultValues and customValues using lodash merge\n    const mergedValues = _.merge(defaultValues, customValuesYaml)\n    return yaml.dump(mergedValues)\n  } catch (error) {\n    throw new Error(`Invalid custom values YAML: ${error}`)\n  }\n}\n\nexport async function generateArgoCDAppManifest(\n  applicationName: string,\n  environment: string,\n  customValuesYaml: string\n) {\n  // download helm tool using tc cache\n  await fetchTcTool('helm')\n\n  // store custom values yaml in a temporary file\n  const customValuesFilePath = path.join(os.tmpdir(), 'custom-values.yaml')\n  await fs.promises.writeFile(customValuesFilePath, customValuesYaml)\n\n  // render the manifest using helm template\n  const manifest = await exec.exec('helm', [\n    'template',\n    '.',\n    '-f',\n    customValuesFilePath\n  ])\n\n  return `\n  apiVersion: argoproj.io/v1alpha1\n  kind: Application\n  metadata:\n    name: ${applicationName}\n    namespace: argocd\n  spec:\n    project: default\n  `\n}\n"],"names":[],"mappings":";;;;;;;;AAQO,eAAe,kBAAkB,CACtC,eAAuB,EACvB,WAAmB,EACnB,UAAkB,EAClB,SAAiB,EACjB,YAAoB,EACpB,YAAoB,EAAA;;AAGpB,IAAA,MAAM,aAAa,GAAwB;AACzC,QAAA,eAAe,EAAE,CAAA,EAAG,eAAe,CAAA,CAAA,EAAI,WAAW,CAAE,CAAA;AACpD,QAAA,WAAW,EAAE;AACX,YAAA,WAAW,EAAE;AACX,gBAAA,SAAS,EAAE;AACZ,aAAA;AACD,YAAA,MAAM,EAAE;AACN,gBAAA,OAAO,EAAE,CAAA,mBAAA,EAAsB,SAAS,CAAA,CAAA,EAAI,UAAU,CAAM,IAAA,CAAA;AAC5D,gBAAA,cAAc,EAAE,YAAY;AAC5B,gBAAA,IAAI,EAAE,CAAA,EAAG,eAAe,CAAA,CAAA,EAAI,WAAW,CAAG,CAAA;AAC3C;AACF;KACF;;IAGD,IAAI,CAAC,YAAY,EAAE;AACjB,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;;;AAIjC,IAAA,IAAI;QACF,MAAM,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;;QAGhD,MAAM,YAAY,GAAG,CAAC,CAAC,KAAK,CAAC,aAAa,EAAE,gBAAgB,CAAC;AAC7D,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;;IAC9B,OAAO,KAAK,EAAE;AACd,QAAA,MAAM,IAAI,KAAK,CAAC,+BAA+B,KAAK,CAAA,CAAE,CAAC;;AAE3D;AAEO,eAAe,yBAAyB,CAC7C,eAAuB,EACvB,WAAmB,EACnB,gBAAwB,EAAA;;AAGxB,IAAA,MAAM,WAAW,CAAC,MAAM,CAAC;;AAGzB,IAAA,MAAM,oBAAoB,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,oBAAoB,CAAC;IACzE,MAAM,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,oBAAoB,EAAE,gBAAgB,CAAC;;IAGlD,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QACvC,UAAU;QACV,GAAG;QACH,IAAI;QACJ;AACD,KAAA;IAED,OAAO;;;;YAIG,eAAe;;;;GAIxB;AACH;;;;"}